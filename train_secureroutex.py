#!/usr/bin/env python3
"""
SecureRouteX: Complete Training Pipeline
=======================================

Step-by-step training guide for SecureRouteX GAN model using your enhanced dataset.
This script shows you exactly how to train the model and what to do with the results.

Author: SecureRouteX Research Team
Date: September 2025
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import warnings
warnings.filterwarnings('ignore')

# Import your GAN model
from secureroutex_gan_model import SecureRouteXGAN

def step1_load_and_prepare_data():
    """
    STEP 1: Load and prepare your enhanced dataset for training
    """
    print("üìä STEP 1: LOADING YOUR ENHANCED DATASET")
    print("="*50)
    
    # Load your enhanced dataset
    df = pd.read_csv('secureroutex_enhanced_dataset.csv')
    
    print(f"‚úÖ Dataset loaded successfully!")
    print(f"   ‚Ä¢ Shape: {df.shape}")
    print(f"   ‚Ä¢ Columns: {len(df.columns)}")
    
    # Show dataset overview
    print(f"\nüìã Dataset Overview:")
    print(f"   ‚Ä¢ Total samples: {len(df):,}")
    print(f"   ‚Ä¢ Features: {len(df.columns) - 3}")  # Excluding target columns
    print(f"   ‚Ä¢ Attack types: {df['attack_type'].nunique()}")
    print(f"   ‚Ä¢ Domains: {df['domain'].nunique()}")
    
    # Display attack type distribution
    print(f"\nüéØ Attack Type Distribution:")
    attack_counts = df['attack_type'].value_counts()
    for attack, count in attack_counts.items():
        percentage = (count / len(df)) * 100
        print(f"   ‚Ä¢ {attack}: {count:,} ({percentage:.1f}%)")
    
    # Display domain distribution
    print(f"\nüè• Domain Distribution:")
    domain_counts = df['domain'].value_counts()
    for domain, count in domain_counts.items():
        percentage = (count / len(df)) * 100
        print(f"   ‚Ä¢ {domain}: {count:,} ({percentage:.1f}%)")
    
    return df

def step2_preprocess_data(df):
    """
    STEP 2: Preprocess data for GAN training
    """
    print("\nüîß STEP 2: PREPROCESSING DATA FOR TRAINING")
    print("="*50)
    
    # Separate features from labels
    feature_columns = [col for col in df.columns 
                      if col not in ['attack_type', 'domain', 'is_malicious']]
    
    print(f"‚úÖ Identified {len(feature_columns)} feature columns")
    
    # Extract features and labels
    X = df[feature_columns].values
    attack_labels = df['attack_type'].values
    domain_labels = df['domain'].values
    
    # One-hot encode categorical variables
    print("üîÑ Encoding categorical variables...")
    
    # Create one-hot encodings
    attack_types = ['normal', 'ddos', 'malicious_node', 'energy_drain', 'routing_attack']
    domains = ['healthcare', 'transportation', 'underwater']
    
    # One-hot encode attack types
    attack_encoded = np.zeros((len(df), len(attack_types)))
    for i, attack in enumerate(attack_labels):
        if attack in attack_types:
            attack_idx = attack_types.index(attack)
            attack_encoded[i, attack_idx] = 1
    
    # One-hot encode domains
    domain_encoded = np.zeros((len(df), len(domains)))
    for i, domain in enumerate(domain_labels):
        if domain in domains:
            domain_idx = domains.index(domain)
            domain_encoded[i, domain_idx] = 1
    
    print(f"   ‚Ä¢ Attack encoding shape: {attack_encoded.shape}")
    print(f"   ‚Ä¢ Domain encoding shape: {domain_encoded.shape}")
    
    # Scale features
    print("üìè Scaling numerical features...")
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # Split into train/validation/test sets
    print("‚úÇÔ∏è Splitting data into train/validation/test sets...")
    
    # First split: 80% train+val, 20% test
    X_temp, X_test, attack_temp, attack_test, domain_temp, domain_test = train_test_split(
        X_scaled, attack_encoded, domain_encoded, 
        test_size=0.2, random_state=42, 
        stratify=attack_labels
    )
    
    # Second split: 80% train, 20% validation (from the 80%)
    X_train, X_val, attack_train, attack_val, domain_train, domain_val = train_test_split(
        X_temp, attack_temp, domain_temp,
        test_size=0.25, random_state=42,  # 0.25 * 0.8 = 0.2 of total
        stratify=[attack_types[np.argmax(row)] for row in attack_temp]
    )
    
    print(f"‚úÖ Data split completed:")
    print(f"   ‚Ä¢ Training set: {X_train.shape[0]:,} samples ({X_train.shape[0]/len(df)*100:.1f}%)")
    print(f"   ‚Ä¢ Validation set: {X_val.shape[0]:,} samples ({X_val.shape[0]/len(df)*100:.1f}%)")
    print(f"   ‚Ä¢ Test set: {X_test.shape[0]:,} samples ({X_test.shape[0]/len(df)*100:.1f}%)")
    
    data_dict = {
        'X_train': X_train, 'X_val': X_val, 'X_test': X_test,
        'attack_train': attack_train, 'attack_val': attack_val, 'attack_test': attack_test,
        'domain_train': domain_train, 'domain_val': domain_val, 'domain_test': domain_test,
        'scaler': scaler, 'feature_columns': feature_columns,
        'attack_types': attack_types, 'domains': domains
    }
    
    return data_dict

def step3_initialize_and_build_model(input_dim, attack_types, domains):
    """
    STEP 3: Initialize and build the SecureRouteX GAN model
    """
    print("\nüèóÔ∏è STEP 3: BUILDING SECUREROUTEX GAN MODEL")
    print("="*50)
    
    # Initialize the GAN model
    print("üöÄ Initializing SecureRouteX GAN...")
    secureroutex = SecureRouteXGAN(
        input_dim=input_dim,
        latent_dim=100,
        domains=domains
    )
    
    # Build all model components
    print("\nüîß Building model architecture...")
    
    print("   üì¶ Building Generator...")
    secureroutex.build_generator()
    
    print("   üì¶ Building Discriminator...")
    secureroutex.build_discriminator()
    
    print("   üì¶ Building Trust Evaluator...")
    secureroutex.build_trust_evaluator()
    
    print("   üì¶ Building Attack Detector...")
    secureroutex.build_attack_detector()
    
    print("   üì¶ Building Complete GAN...")
    secureroutex.build_complete_gan()
    
    # Compile models
    print("\n‚öôÔ∏è Compiling models with optimizers...")
    secureroutex.compile_models()
    
    print("‚úÖ Model initialization complete!")
    print(f"   ‚Ä¢ Input dimensions: {input_dim}")
    print(f"   ‚Ä¢ Latent space: 100")
    print(f"   ‚Ä¢ Attack types: {len(attack_types)}")
    print(f"   ‚Ä¢ Domains: {len(domains)}")
    
    return secureroutex

def step4_train_the_model(secureroutex, data_dict, epochs=50):
    """
    STEP 4: Train the GAN model with your data
    """
    print(f"\nüöÄ STEP 4: TRAINING THE MODEL ({epochs} EPOCHS)")
    print("="*50)
    
    X_train = data_dict['X_train']
    attack_train = data_dict['attack_train']
    domain_train = data_dict['domain_train']
    
    print("üéØ Starting GAN training...")
    print(f"   ‚Ä¢ Training samples: {X_train.shape[0]:,}")
    print(f"   ‚Ä¢ Epochs: {epochs}")
    print(f"   ‚Ä¢ Batch size: 32")
    
    # Train the model
    secureroutex.train_gan(
        X_train=X_train,
        attack_train=attack_train, 
        domain_train=domain_train,
        epochs=epochs,
        batch_size=32
    )
    
    print("‚úÖ Training completed!")
    
    return secureroutex

def step5_evaluate_performance(secureroutex, data_dict):
    """
    STEP 5: Evaluate model performance on test data
    """
    print("\nüìä STEP 5: EVALUATING MODEL PERFORMANCE")
    print("="*50)
    
    X_test = data_dict['X_test']
    attack_test = data_dict['attack_test']
    domain_test = data_dict['domain_test']
    
    print("üéØ Running comprehensive evaluation...")
    
    # Evaluate model performance
    performance = secureroutex.evaluate_model_performance(X_test, attack_test, domain_test)
    
    print("‚úÖ Performance Evaluation Results:")
    
    # Display discriminator performance
    if 'discriminator_auc' in performance:
        print(f"   üéØ Discriminator AUC: {performance['discriminator_auc']:.4f}")
        if performance['discriminator_auc'] > 0.9:
            print("      ‚úÖ Excellent performance (>0.9)")
        elif performance['discriminator_auc'] > 0.8:
            print("      ‚úÖ Good performance (>0.8)")
        else:
            print("      ‚ö†Ô∏è Needs improvement (<0.8)")
    
    # Display trust score statistics
    if 'trust_scores' in performance:
        print(f"\n   üõ°Ô∏è Trust Score Analysis:")
        trust_stats = performance['trust_scores']
        print(f"      ‚Ä¢ Direct Trust (avg): {trust_stats['direct_mean']:.3f}")
        print(f"      ‚Ä¢ Indirect Trust (avg): {trust_stats['indirect_mean']:.3f}")
        print(f"      ‚Ä¢ Energy Trust (avg): {trust_stats['energy_mean']:.3f}")
        print(f"      ‚Ä¢ Composite Trust (avg): {trust_stats['composite_mean']:.3f}")
    
    # Display attack detection results
    if 'attack_detection' in performance:
        print(f"\n   üö® Attack Detection Analysis:")
        attack_stats = performance['attack_detection']
        print(f"      ‚Ä¢ Mean Attack Probability: {attack_stats['mean_attack_probability']:.3f}")
        print(f"      ‚Ä¢ Attack Class Distribution: {attack_stats['attack_class_distribution']}")
    
    return performance

def step6_generate_synthetic_attacks(secureroutex, domains, attack_types):
    """
    STEP 6: Generate synthetic attack data for each domain
    """
    print("\nüéØ STEP 6: GENERATING SYNTHETIC ATTACK DATA")
    print("="*50)
    
    synthetic_results = {}
    
    for domain in domains:
        print(f"\nüè• Generating attacks for {domain} domain:")
        domain_attacks = {}
        
        for attack_type in attack_types:
            if attack_type != 'normal':  # Skip normal traffic
                print(f"   ‚Ä¢ Generating {attack_type} attacks...")
                
                # Generate 100 synthetic attacks for this domain/attack combination
                synthetic_data = secureroutex.generate_synthetic_attacks(
                    num_samples=100,
                    domain=domain,
                    attack_type=attack_type
                )
                
                domain_attacks[attack_type] = synthetic_data
                print(f"     ‚úÖ Generated {synthetic_data.shape[0]} samples")
        
        synthetic_results[domain] = domain_attacks
    
    print(f"\n‚úÖ Synthetic attack generation complete!")
    print(f"   ‚Ä¢ Total domains: {len(synthetic_results)}")
    print(f"   ‚Ä¢ Attack types per domain: {len(attack_types)-1}")  # Exclude 'normal'
    
    return synthetic_results

def step7_test_real_time_detection(secureroutex, data_dict):
    """
    STEP 7: Test real-time attack detection capabilities
    """
    print("\nüö® STEP 7: TESTING REAL-TIME ATTACK DETECTION")
    print("="*50)
    
    X_test = data_dict['X_test']
    domains = data_dict['domains']
    
    print("üîç Testing real-time detection on sample data...")
    
    # Test on a few samples
    num_test_samples = 5
    
    for i in range(num_test_samples):
        print(f"\nüìä Test Sample {i+1}:")
        
        # Get sample network features
        network_features = X_test[i:i+1]  # Keep as 2D array
        
        # Calculate trust scores for this sample
        domain_idx = np.random.randint(0, len(domains))  # Random domain for demo
        domain = domains[domain_idx]
        
        trust_scores = secureroutex.calculate_trust_scores(network_features, domain)
        
        # Create dummy historical context (in real system, this would be actual history)
        history_context = np.random.uniform(0.3, 0.8, (1, 10))
        
        # Combine trust scores for attack detector input
        trust_input = np.array([[
            trust_scores['direct_trust'][0],
            trust_scores['indirect_trust'][0], 
            trust_scores['energy_trust'][0],
            trust_scores['composite_trust'][0]
        ]])
        
        # Perform real-time detection
        detection_result = secureroutex.detect_attacks_realtime(
            network_features, trust_input, history_context
        )
        
        print(f"   üè• Domain: {domain}")
        print(f"   üõ°Ô∏è Trust Scores:")
        print(f"      ‚Ä¢ Direct: {trust_scores['direct_trust'][0]:.3f}")
        print(f"      ‚Ä¢ Composite: {trust_scores['composite_trust'][0]:.3f}")
        print(f"   üö® Attack Detection:")
        print(f"      ‚Ä¢ Attack Probability: {detection_result['attack_probability']:.3f}")
        print(f"      ‚Ä¢ Predicted Attack: {detection_result['predicted_attack']}")
        print(f"      ‚Ä¢ Recommended Action: {detection_result['recommended_action']}")
        
        # Determine if this is a security threat
        if detection_result['attack_probability'] > 0.5:
            print(f"      ‚ö†Ô∏è  HIGH THREAT - Action: {detection_result['recommended_action'].upper()}")
        else:
            print(f"      ‚úÖ Low threat - Normal operation")
    
    print("\n‚úÖ Real-time detection test complete!")

def step8_save_results_and_models(secureroutex, performance, synthetic_results):
    """
    STEP 8: Save trained models and generate comprehensive results
    """
    print("\nüíæ STEP 8: SAVING MODELS AND RESULTS")
    print("="*50)
    
    # Save all trained models
    print("üìÅ Saving trained models...")
    secureroutex.save_model('secureroutex_trained_models')
    
    # Create training visualization
    print("üìä Generating training visualization...")
    secureroutex.visualize_training_results('secureroutex_training_results.png')
    
    # Save synthetic attack data
    print("üíæ Saving synthetic attack data...")
    
    # Convert synthetic results to DataFrames and save
    all_synthetic_data = []
    
    for domain, attacks in synthetic_results.items():
        for attack_type, data in attacks.items():
            for i, sample in enumerate(data):
                row = {
                    'sample_id': f"{domain}_{attack_type}_{i}",
                    'domain': domain,
                    'attack_type': attack_type,
                    'synthetic': True
                }
                # Add feature values
                for j, value in enumerate(sample):
                    row[f'feature_{j}'] = value
                
                all_synthetic_data.append(row)
    
    synthetic_df = pd.DataFrame(all_synthetic_data)
    synthetic_df.to_csv('secureroutex_synthetic_attacks.csv', index=False)
    
    print(f"   ‚úÖ Saved {len(synthetic_df)} synthetic attack samples")
    
    # Create comprehensive results report
    print("üìã Creating results report...")
    
    results_report = f"""
SecureRouteX Training Results Report
===================================

Training Configuration:
‚Ä¢ Model: SecureRouteX GAN with Trust Evaluation
‚Ä¢ Dataset: Enhanced SecureRouteX Dataset (9,000 samples)
‚Ä¢ Architecture: Generator + Discriminator + Trust Evaluator + Attack Detector
‚Ä¢ Training: Adversarial training with multi-task learning

Performance Results:
"""
    
    if 'discriminator_auc' in performance:
        results_report += f"‚Ä¢ Discriminator AUC: {performance['discriminator_auc']:.4f}\n"
    
    if 'trust_scores' in performance:
        trust_stats = performance['trust_scores']
        results_report += f"‚Ä¢ Average Composite Trust: {trust_stats['composite_mean']:.3f}\n"
    
    results_report += f"""

Synthetic Data Generation:
‚Ä¢ Healthcare domain attacks: {len(synthetic_results.get('healthcare', {})) * 100} samples
‚Ä¢ Transportation domain attacks: {len(synthetic_results.get('transportation', {})) * 100} samples  
‚Ä¢ Underwater domain attacks: {len(synthetic_results.get('underwater', {})) * 100} samples

Model Capabilities:
‚úÖ Real-time attack detection
‚úÖ Multi-dimensional trust calculation
‚úÖ SDN routing recommendations (Allow/Block/Reroute)
‚úÖ Cross-domain security intelligence
‚úÖ Synthetic attack pattern generation

Files Generated:
‚Ä¢ secureroutex_trained_models/ - Complete trained model files
‚Ä¢ secureroutex_training_results.png - Training visualization
‚Ä¢ secureroutex_synthetic_attacks.csv - Generated synthetic attack data
‚Ä¢ secureroutex_results_report.txt - This report

Next Steps:
1. Deploy model in SDN testbed environment
2. Conduct NS-3 network simulation with 15 nodes
3. Compare performance against traditional routing methods
4. Prepare results for conference paper submission
"""
    
    with open('secureroutex_results_report.txt', 'w') as f:
        f.write(results_report)
    
    print("‚úÖ All results saved successfully!")
    print(f"\nüìÅ Generated Files:")
    print(f"   ‚Ä¢ secureroutex_trained_models/ (Model files)")
    print(f"   ‚Ä¢ secureroutex_training_results.png (Visualization)")
    print(f"   ‚Ä¢ secureroutex_synthetic_attacks.csv (Synthetic data)")
    print(f"   ‚Ä¢ secureroutex_results_report.txt (Complete report)")

def main_training_pipeline():
    """
    MAIN: Complete SecureRouteX training pipeline
    """
    print("üöÄ SECUREROUTEX COMPLETE TRAINING PIPELINE")
    print("="*60)
    print("This script will train your GAN model step by step using your enhanced dataset.")
    print("Each step is clearly explained and shows you what to do next.")
    print("="*60)
    
    try:
        # Step 1: Load data
        df = step1_load_and_prepare_data()
        
        # Step 2: Preprocess data
        data_dict = step2_preprocess_data(df)
        
        # Step 3: Build model
        secureroutex = step3_initialize_and_build_model(
            input_dim=data_dict['X_train'].shape[1],
            attack_types=data_dict['attack_types'],
            domains=data_dict['domains']
        )
        
        # Step 4: Train model
        secureroutex = step4_train_the_model(secureroutex, data_dict, epochs=20)  # Reduced for demo
        
        # Step 5: Evaluate performance
        performance = step5_evaluate_performance(secureroutex, data_dict)
        
        # Step 6: Generate synthetic attacks
        synthetic_results = step6_generate_synthetic_attacks(
            secureroutex, data_dict['domains'], data_dict['attack_types']
        )
        
        # Step 7: Test real-time detection
        step7_test_real_time_detection(secureroutex, data_dict)
        
        # Step 8: Save everything
        step8_save_results_and_models(secureroutex, performance, synthetic_results)
        
        print("\nüéâ TRAINING PIPELINE COMPLETED SUCCESSFULLY!")
        print("="*60)
        print("‚úÖ Your SecureRouteX GAN model is now fully trained and ready!")
        print("‚úÖ All results, models, and reports have been saved.")
        print("‚úÖ You can now use the model for your review presentation tomorrow.")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå Error during training: {str(e)}")
        print("üí° Make sure your 'secureroutex_enhanced_dataset.csv' file exists in the current directory.")

if __name__ == "__main__":
    main_training_pipeline()